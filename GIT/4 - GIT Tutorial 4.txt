--------------- GIT PART 4 ----------------
002
 
003
1. Here I'll demonstrate a workflow option with git called Fork 7 Pull. I'll also answer some questions I've received like how to work with multiple GitHub accounts on the same computer.
004
 
005
---------------- GENERATING SSH KEYS ----------------
006
 
007
2. SSH keys allow you to identify trusted computers without the need for passwords and here I'll show you how to generate multiple codes for multiple GitHub accounts.
008
 
009
a. ssh-keygen -t rsa -C "Your Email Address" # Generates the key
010
 
011
3. Then you have to define the name of the file you want to save the key in
012
 
013
4. A public key and a randomart image are generated. The randomart image is provided because it is easier to recognize then a random string of numbers.
014
 
015
5. cd ~/.ssh # Takes us to the location of our keys
016
 
017
6. I'll open the public key with vim
018
 
019
7. Now I'll copy the entire key from ssh-rsa till the end with my email
020
 
021
8. Got to GitHub and sign in
022
 
023
9. Click on account settings
024
 
025
10. Click on SSH
026
 
027
11. Give the key a name, paste in the key and click add key
028
 
029
12. Your public key is then listed
030
 
031
---------------- CREATING MULTIPLE GITHUB ACCOUNTS ----------------
032
 
033
13. Now I'll create another ssh key for a completely new account on GitHub
034
    ssh-keygen -t rsa -C "Your Email Address" # Generates the key
035
 
036
14. Give it a name
037
 
038
15. A public key and randomart are generated again
039
 
040
16. cd ~/.ssh # Takes me to the location for the keys
041
    ls # Lists everything in the directory
042
     
043
17. Go to GitHub again using a different GitHub account and click Account Settings
044
 
045
18. vim newthinktank.pub # Get the new key that was generated
046
 
047
19. Copy the key
048
 
049
20. After you click SSH Keys in the sidebar on GitHub, paste the key in, give it a title and click Add Key
050
 
051
21. We used a unique name for our keys so we have to tell ssh about them.
052
    ssh-add ~/.ssh/derekbanas
053
    ssh-add ~/.ssh/newthinktank
054
     
055
22. touch ~/.ssh/config # Creates the empty file config
056
    vim config # Open config
057
     
058
23. We are defining which account we want to work with by associating a keyword to our 2 different hosts.
059
 
060
Host github.com
061
    HostName github.com
062
    User git
063
    IdentityFile ~/.ssh/derekbanas
064
     
065
Host github-ntt
066
    HostName github.com
067
    User git
068
    IdentityFile ~/.ssh/newthinktank
069
     
070
24. Change to the directory you want to use on GitHub
071
 
072
25. This is the account on GitHub that holds the original master files
073
 
074
26 - 28. After I edit some files I stage them and commit them
075
 
076
29. git remote add myorigin git@github-ntt:newthinktank/CrazyTipCalc.git
077
 
078
a. Create an alias for our remote directory
079
 
080
b. github-ntt # I identify myself using the newthinktank ssh key
081
 
082
c. newthinktank/CrazyTipCalc.git # The specific files I want on GitHub
083
 
084
30. git push myorigin master
085
When you try to push to GitHub you may see this warning. You can verify you are pushing to GitHub by comparing the public keys
086
 
087
31 - 34. You can see GitHubs public keys here
088
https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints
089
 
090
35 - 37. Log into GitHub using my derekbanas account and search for the directory I have associated with my newthinktank account
091
 
092
38 - 41. Get the URL from GitHub and I can clone it
093
git clone https://github.com/newthinktank/CrazyTipCalc.git 
094
 
095
---------------- FORK & PULL WORKFLOW ----------------
096
 
097
The way the Fork & Pull works is that anyone can Fork a repository and make changes locally. They don't have the ability to push their potentially damaging code. They can however request that the host repository pull their changes if they would like using a Pull Request. ( This is a very common workflow in the open source community )
098
 
099
42. Find a repository you'd like to work on and click Fork in GitHub
100
 
101
43 - 45. git clone https://github.com/derekbanas/CrazyTipCalc.git
102
    # Get the URL for the fork on GitHub and clone it on your local computer
103
 
104
46. git remote add upstream https://github.com/derekbanas/CrazyTipCalc.git
105
    # Assigns the original remote and not the fork to the keyword upstream
106
     
107
47. git fetch upstream
108
    # Pull in changes made in the original repository with effecting the local files
109
 
110
48 - 53. I can change a file locally, stage and commit it. I can then push it to more Fork on GitHub.
111
 
112
54. git merge upstream/master # Merges files on GitHub with my local files
113
 
114
55. If I think my changes should be merged with the original repository I can make a Pull Request. Click on Compare, review, create a pull request on GitHub.
115
 
116
56. Changes are listed as well as other data associated with your Forked version. Click the button labeled Create Pull Request if you think you're ready.
117
 
118
57 - 58. Leave a detailed reason why the Pull Request should be excepted and click Send Pull Request
119
 
120
59. The owner of the original repository can see how many Pull Requests they have received on the right side of the screen.
121
 
122
60 - 63. They can go through the Pull Requests and decide what to do. 
123
 
124
64 - 65. To merge click Merge Pull Request in GitHub and then leave a detailed explanation why it was done.